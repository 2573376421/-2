C51 COMPILER V9.60.0.0   ALGORITHM                                                         08/09/2020 11:17:46 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE ALGORITHM
OBJECT MODULE PLACED IN .\Out_File\algorithm.obj
COMPILER INVOKED BY: E:\keil 5\C51\BIN\C51.EXE ..\..\Libraries\User_libraries\algorithm.c LARGE OMF2 OPTIMIZE(8,SPEED) B
                    -ROWSE FLOATFUZZY(2) INCDIR(..\..\Libraries\libraries;..\..\Libraries\seekfree_libraries;..\..\Libraries\seekfree_periphe
                    -ral;..\USER\inc;..\USER\src;..\CODE;..\..\Libraries\User_libraries) DEBUG PRINT(.\Out_File\algorithm.lst) TABS(2) OBJECT
                    -(.\Out_File\algorithm.obj)

line level    source

   1          #include "algorithm.h"
   2          #include "SEEKFREE_ICM20602.h"
   3          #include "math.h" 
   4          #include "control.h"
   5          #include "headfile.h"
   6          
   7          uint16 Filter_AD1,Filter_AD2,Filter_AD3,Filter_AD4;
   8          
   9          float Accel_ax, Accel_az,Gyro_y;             //X轴加速度值暂存
  10          
  11          float Angle_lv;
  12          
  13          /*------------------------------------------------------------------
  14          平均滤波法（又称防脉冲干扰平均滤波法）
  15          -------------------------------------------------------------------*/
  16          void Filter(void)
  17          {
  18   1          uint16 i;
  19   1          uint16 filter_max1 = 0,filter_max2 = 0,filter_max3 = 0,filter_max4 = 0;
  20   1          uint16 filter_min1 = 255,filter_min2 = 255,filter_min3 = 255,filter_min4 = 255;
  21   1          uint16 filter_sum1 = 0,filter_sum2 = 0,filter_sum3 = 0,filter_sum4 = 0;
  22   1          uint16 filter_col1[FILTER_N],filter_col2[FILTER_N],filter_col3[FILTER_N],filter_col4[FILTER_N];
  23   1      
  24   1          for(i = 0; i < FILTER_N; i++) 
  25   1          {
  26   2              filter_col1[i] = adc_once(ADC_P14, ADC_8BIT);  //获取采样数据
  27   2              filter_col2[i] = adc_once(ADC_P15, ADC_8BIT);
  28   2              filter_col3[i] = adc_once(ADC_P16, ADC_8BIT);
  29   2              filter_col4[i] = adc_once(ADC_P17, ADC_8BIT);
  30   2              filter_max1 = max(filter_max1, filter_col1[i]);
  31   2              filter_min1 = min(filter_min1, filter_col1[i]);
  32   2              filter_max2 = max(filter_max2, filter_col2[i]);
  33   2              filter_min2 = min(filter_min2, filter_col2[i]);
  34   2              filter_max3 = max(filter_max3, filter_col3[i]);
  35   2              filter_min3 = min(filter_min3, filter_col3[i]);        
  36   2              filter_max4 = max(filter_max4, filter_col4[i]);
  37   2              filter_min4 = min(filter_min4, filter_col4[i]);
  38   2      
  39   2              filter_sum1 += filter_col1[i];
  40   2              filter_sum2 += filter_col2[i];
  41   2              filter_sum3 += filter_col3[i];            
  42   2              filter_sum4 += filter_col4[i];
  43   2          }
  44   1      
  45   1          Filter_AD1 = (filter_sum1 - filter_max1 - filter_min1) / (FILTER_N - 2);
  46   1          Filter_AD2 = (filter_sum2 - filter_max2 - filter_min2)  / (FILTER_N - 2);
  47   1          Filter_AD3 = (filter_sum3 - filter_max3 - filter_min3)  / (FILTER_N - 2);
  48   1          Filter_AD4 = (filter_sum4 - filter_max4 - filter_min4)  / (FILTER_N - 2);      
  49   1      }
  50          
  51          
  52          
C51 COMPILER V9.60.0.0   ALGORITHM                                                         08/09/2020 11:17:46 PAGE 2   

  53          //--------------------------------------------------------------------------------------------------------
             ------------
  54          //  @brief      角度计算      
  55          //倾角计算（互补滤波）
  56          //--------------------------------------------------------------------------------------------------------
             ------------
  57          void Angle_Calcu(void)
  58          {
  59   1          static float Angle_g,Gyro_speed_y;
  60   1          static uint8 first_angle;
  61   1          float Angle_m; 
  62   1          float d = 0.095;
  63   1          float dt = 0.00012; //积分系数    
  64   1          if (!first_angle)
  65   1          {
  66   2              first_angle = 1;
  67   2              Angle_g = Angle_m;
  68   2          }
  69   1          Accel_ax  = icm_acc_x;          //读取X轴加速度
  70   1          Accel_az  = icm_acc_z;          //读取z轴加速度
  71   1          Gyro_y = icm_gyro_y;
  72   1          Gyro_speed_y = Gyro_y * dt;
  73   1          Angle_g = (int16)(Gyro_speed_y + Angle_g);
  74   1          Angle_m = (int16)(atan(Accel_ax/Accel_az)*180/3.14);
  75   1          Angle_lv = d * Angle_m + (1 - d) * Angle_lv ; 
  76   1      }
  77          
  78          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1378    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     33     134
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
